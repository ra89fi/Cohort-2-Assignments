/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. delete /todos/:id - delete a todo item by id
    description: deletes a todo item identified by its id.
    response: 200 ok if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');

const app = express();

app.use(bodyParser.json());

let todos = fs.readFileSync(path.join(__dirname, 'todos.json'));


app.get('/todos', (req, res) => {
  res.json(todos);
})

app.get('/todos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const tds = todos.filter(todo => todo.id === id);
  if (tds.length) res.json(tds[0]);
  else res.sendStatus(404);
})

app.post('/todos', (req, res) => {
  const todo = { ...req.body, id: Date.now() }
  todos.push(todo);
  fs.writeFileSync(path.join(__dirname, 'todos.json'), JSON.stringify(todos));
  res.status(201).json({ id: todo.id })
})

app.put('/todos/:id', (req, res) => {
  let flag = false;
  todos = todos.map(todo => {
    if (todo.id !== parseInt(req.params.id)) return todo;
    else {
      flag = true;
      return {
        ...todo,
        ...req.body
      }

    }
  })
  fs.writeFileSync(path.join(__dirname, 'todos.json'), JSON.stringify(todos));
  if (flag) res.sendStatus(200);
  else res.sendStatus(404);
})

app.delete('/todos/:id', (req, res) => {
  let flag = false;
  todos = todos.filter(todo => {
    if (todo.id === parseInt(req.params.id)) {
      flag = true;
      return false;
    }
    return true;
  })
  fs.writeFileSync(path.join(__dirname, 'todos.json'), JSON.stringify(todos));
  if (flag) res.sendStatus(200);
  else res.sendStatus(404);
})

module.exports = app;
